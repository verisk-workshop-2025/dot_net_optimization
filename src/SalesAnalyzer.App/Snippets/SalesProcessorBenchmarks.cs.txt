using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Jobs;
using SalesAnalyzer.Lib.Services;
using System.Text;

namespace SalesAnalyzer.Benchmarks
{
    [SimpleJob(runtimeMoniker: RuntimeMoniker.Net80)]
    [MemoryDiagnoser]
    public class SalesProcessorBenchmarks
    {
        SalesProcessor processor;

        [GlobalSetup]
        public void Setup()
        {
            processor = new SalesProcessor();

            //processor.InitializeUnoptimized();
            //processor.InitializeOptimized();
            processor.InitializeHighlyOptimized();
        }

        //[Benchmark(Baseline = true)]
        //public string InitializeUnoptimized()
        //{
        //    var processor = new SalesProcessor();

        //    processor.InitializeUnoptimized();

        //    return "InitializeUnoptimized";
        //}


        //[Benchmark()]
        //public string InitializeOptimized()
        //{
        //    var processor = new SalesProcessor();

        //    processor.InitializeOptimized();

        //    return "InitializeOptimized";
        //}

        //[Benchmark]
        //public string InitializeHighlyOptimized()
        //{
        //    var processor = new SalesProcessor();

        //    processor.InitializeHighlyOptimized();

        //    return "InitializeHighlyOptimized";
        //}


        [Benchmark]
        public string Process(Baseline = true)
        {
            var sb = new StringBuilder();
            sb.AppendLine("Process: -------------------");

            foreach (var branch in processor.Branches)
            {
                var highestSellingCountItem = processor.FindHighestSellingCountItem(branch.Key);
                var lowestSellingCountItem = processor.FindLowestSellingCountItem(branch.Key);
                sb.AppendLine($"Branch: {branch}, HSC - {highestSellingCountItem}, LSC - {lowestSellingCountItem}");
            }

            return sb.ToString();
        }

        [Benchmark]
        public string ProcessCombined()
        {
            var sb = new StringBuilder();
            sb.AppendLine("Process: -------------------");

            foreach (var branch in processor.Branches)
            {
                var (highestSellingCountItem, lowestSellingCountItem) = processor.GetReportsForHighestAndLowestSellingCount(branch.Key);
                sb.AppendLine($"Branch: {branch}, HSC - {highestSellingCountItem}, LSC - {lowestSellingCountItem}");
            }

            return sb.ToString();
        }
    }
}
